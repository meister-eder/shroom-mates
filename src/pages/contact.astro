---
import Layout from "../layouts/Layout.astro";

const title = "Kontakt";
const description =
  "Schreib uns eine Nachricht! Kontaktiere die shroom-mates f체r Fragen zu unseren Austernpilzen, Verkaufsterminen oder anderen Anliegen.";
---

<Layout title={title} description={description}>
  <main>
    <h1>Schreib uns was Nettes</h1>
    <div class="content">
      <form method="POST" id="contact-form" novalidate>
        <input
          type="hidden"
          name="access_key"
          value="d69f2b91-fe55-4258-97a9-6bb53285b5e2"
        />

        <div class="form-group">
          <label for="name">Dein Name</label>
          <input
            type="text"
            id="name"
            name="name"
            autocomplete="name"
            required
            aria-describedby="name-error"
          />
          <div id="name-error" class="error-message" role="alert"></div>
        </div>

        <div class="form-group">
          <label for="email">E-Mail-Adresse</label>
          <input
            type="email"
            id="email"
            name="email"
            autocomplete="email"
            required
            aria-describedby="email-help email-error"
          />
          <p id="email-help" class="help-text">
            Wir verwenden deine E-Mail nur f체r die Antwort auf deine Nachricht
          </p>
          <div id="email-error" class="error-message" role="alert"></div>
        </div>

        <div class="form-group">
          <label for="message">Nachricht</label>
          <textarea
            id="message"
            name="message"
            required
            aria-describedby="message-error"
            rows="6"></textarea>
          <div id="message-error" class="error-message" role="alert"></div>
        </div>

        <button type="submit" class="cta-button primary">
          <span class="button-text">Nachricht abschicken</span>
          <span class="button-loading" hidden>Wird gesendet...</span>
        </button>

        <div id="result" role="status" aria-live="polite"></div>
      </form>
    </div>
    <script>
      const form = document.getElementById("contact-form");
      const result = document.getElementById("result");
      const buttonText = document.querySelector(".button-text");
      const buttonLoading = document.querySelector(".button-loading");

      if (!form || !result || !buttonText || !buttonLoading) return;

      // Form validation
      function validateField(field, errorElement) {
        const value = field.value.trim();
        let isValid = true;
        let errorMessage = "";

        if (field.hasAttribute("required") && !value) {
          isValid = false;
          errorMessage = "Dieses Feld ist erforderlich.";
        } else if (field.type === "email" && value) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(value)) {
            isValid = false;
            errorMessage = "Bitte gib eine g체ltige E-Mail-Adresse ein.";
          }
        }

        errorElement.textContent = errorMessage;
        field.setAttribute("aria-invalid", !isValid ? "true" : "false");

        return isValid;
      }

      // Add real-time validation
      const fields = ["name", "email", "message"];
      fields.forEach((fieldName) => {
        const field = document.getElementById(fieldName);
        const errorElement = document.getElementById(`${fieldName}-error`);

        if (field && errorElement) {
          field.addEventListener("blur", () => {
            validateField(field, errorElement);
          });

          field.addEventListener("input", () => {
            if (field.getAttribute("aria-invalid") === "true") {
              validateField(field, errorElement);
            }
          });
        }
      });

      form.addEventListener("submit", function (e) {
        e.preventDefault();

        // Validate all fields
        let isFormValid = true;
        fields.forEach((fieldName) => {
          const field = document.getElementById(fieldName);
          const errorElement = document.getElementById(`${fieldName}-error`);
          if (field && errorElement && !validateField(field, errorElement)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) {
          result.textContent = "Bitte korrigiere die Fehler im Formular.";
          return;
        }

        const formData = new FormData(form as HTMLFormElement);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        // Update button state
        buttonText.setAttribute("hidden", "true");
        buttonLoading.removeAttribute("hidden");
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.setAttribute("disabled", "true");
        }
        result.textContent = "";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {
            let json = await response.json();
            if (response.status == 200) {
              result.textContent =
                "Nachricht erfolgreich gesendet! Wir melden uns bald bei dir.";
              // Reset form fields manually
              const nameField = document.getElementById("name");
              const emailField = document.getElementById("email");
              const messageField = document.getElementById("message");
              if (nameField && "value" in nameField) nameField.value = "";
              if (emailField && "value" in emailField) emailField.value = "";
              if (messageField && "value" in messageField)
                messageField.value = "";

              // Reset field validation states
              fields.forEach((fieldName) => {
                const field = document.getElementById(fieldName);
                if (field) {
                  field.setAttribute("aria-invalid", "false");
                  const errorElement = document.getElementById(
                    `${fieldName}-error`
                  );
                  if (errorElement) errorElement.textContent = "";
                }
              });
            } else {
              console.log(response);
              result.textContent =
                json.message || "Es ist ein Fehler aufgetreten.";
            }
          })
          .catch((error) => {
            console.log(error);
            result.textContent =
              "Ups, das hat nicht geklappt. Bitte versuche es sp채ter noch einmal.";
          })
          .finally(() => {
            // Reset button state
            buttonText.removeAttribute("hidden");
            buttonLoading.setAttribute("hidden", "true");
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton) {
              submitButton.removeAttribute("disabled");
            }
          });
      });
    </script>
  </main>

  <style>
    main {
      font-size: 20px;
      line-height: 1.6;
      padding: 2rem;
      min-height: 100vh;
    }
    h1 {
      font-size: 3rem;
      font-weight: 700;
      line-height: 1;
      text-align: center;
      margin: 3rem 0;
    }
    .content {
      max-width: 600px;
      margin: 0 auto;
      padding: 0rem;
    }
    .form-group {
      margin-bottom: 1.5rem;
    }
    label {
      display: block;
      margin-bottom: 0.5rem;
    }
    input,
    textarea {
      width: 100%;
      padding: 0.5rem;
      font-size: 1rem;
      border: 2px solid #5f5f5f;
      border-radius: 4px;
      font-family: inherit;
      transition: border-color 0.2s ease;
    }

    input:focus,
    textarea:focus {
      outline: 2px solid var(--focus-color, #5f5f5f);
      outline-offset: 2px;
      border-color: var(--focus-color, #5f5f5f);
    }

    input[aria-invalid="true"],
    textarea[aria-invalid="true"] {
      border-color: #d32f2f;
    }

    .help-text {
      font-size: 0.9rem;
      color: #666;
      margin-top: 0.25rem;
      margin-bottom: 0;
    }

    .error-message {
      color: #d32f2f;
      font-size: 0.9rem;
      margin-top: 0.25rem;
      min-height: 1.2em;
    }

    .button-loading {
      opacity: 0.7;
    }

    #result {
      margin-top: 1rem;
      padding: 1rem;
      border-radius: 4px;
      background-color: #e8f5e8;
      color: #2e7d32;
      font-weight: 500;
    }

    #result:empty {
      display: none;
    }
    textarea {
      height: 150px;
      resize: vertical;
    }

    .cta-button {
      padding: 1rem 2rem;
      font-size: 1.1rem;
      font-weight: 600;
      border: none;
      border-radius: 0;
      cursor: pointer;
      transition: all 0.2s;
      font-family: "Dm Mono", monospace;
      text-transform: uppercase;
    }

    .cta-button.primary {
      background-color: #fdfdfd;
      color: #000;
      box-shadow: 6px 6px #000;
    }

    .cta-button.primary:hover {
      transform: translate(2px, 2px);
      box-shadow: 4px 4px #000;
    }

    .cta-button.secondary {
      background-color: transparent;
      border: 2px solid #fdfdfd;
      color: #fdfdfd;
      box-shadow: 6px 6px rgba(0, 0, 0, 0.8);
    }

    .cta-button:focus-visible {
      outline: 2px solid var(--focus-color, #5f5f5f);
      outline-offset: 2px;
    }

    .cta-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
    }
  </style>
</Layout>
